/*
 *  test_multimeter_offset.sli
 *
 *  This file is part of NEST.
 *
 *  Copyright (C) 2004 The NEST Initiative
 *
 *  NEST is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  NEST is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with NEST.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

/** @BeginDocumentation
Name: testsuite::test_multimeter_offset - Test if offset attribute works properly
 
Synopsis: (test_multimeter_offset) run -> NEST exits if test fails

Description:
  This test checks if the offset attribute of multimeter works as expected;
  contains 3 tests:

  1) checks if recorded times are indeed relative to an offset, and the first
     sampled time point is the offset itself
  2) check if data logger is initialized correctly
  3) ensures offset can only be set before the multimeter is connected to nodes
  4) ensures offset works correctly even if origin, start and stop are modified
  5) ensures offsets behave correctly when we create a second multimeter after an
     initial similation
  6) ensures that offset behave correctly after initial simulation time
  7) ensures that multimeter with offset behave correctly after initial simulation
     time longer than offset

Author: Barna Zajzon, 2017-03-10, Stine B. Vennemo, September 2020
 */

(unittest) run
/unittest using

% use power-of-two resolution to avoid roundof problems
/res -3 dexp def


% Test 1
% checks if recorded times are indeed relative to an offset
{
  (Test 1) ==

  /simtime 15. def % simulation time
  /recoffs 5.  def % offset time --- different from default
  /recint  3.  def % recording interval --- different from default

  /recs    [/V_m]       def % recording devices
  /refdata [5. 8. 11. 14.] def % offset data

  ResetKernel
  << /resolution res >> SetKernelStatus

  /n /iaf_psc_alpha Create def

  /mm /multimeter << /interval recint /offset recoffs /record_from recs >>
    Create def

  % connect and simulate
  mm n Connect
  simtime Simulate

  % check results
  /result mm /events get def
  result /times get cva

  % compare to reference data
  refdata eq
}
assert_or_die


% Test 2
% check if data logger is initialized correctly
{
  (Test 2) ==

  /simtimeinit  10. def % initial simulation time
  /simtime      20. def % second simulation time
  /recoffs      5.  def % offset time --- different from default
  /recint       3.  def % recording interval --- different from default
  /recstart     20. def % start of recording window
  /recstop      30. def % end of recording window

  /recs    [/V_m]        def % recording devices
  /refdata [23. 26. 29.] def % offset data

  ResetKernel
  << /resolution res >> SetKernelStatus

  /n /iaf_psc_alpha Create def

  /mm /multimeter << /start recstart /stop recstop
    /interval recint /offset recoffs /record_from recs >> Create def

  % connect and simulate
  mm n Connect
  simtimeinit Simulate

  % create second multimeter
  /mmtwo /multimeter << /start recstart /stop recstop
    /interval recint /offset recoffs /record_from recs >> Create def

  % connect second multimeter and simulate further
  mmtwo n Connect
  simtime Simulate

  % check results
  /result mm /events get def
  result /times get cva

  % compare first multimeter to reference data
  refdata eq

  % extract results for second multimeter
  /resulttwo mmtwo /events get def
  resulttwo /times get cva

  % compare second multimeter to reference data
  refdata eq
}
assert_or_die


% Test 3
% make sure offset cannot be changed after connecting to a node
{
  (Test 3) ==

  ResetKernel
  
  % create multimeter and node
  /mm /multimeter Create def
  /neuron /iaf_psc_exp Create def

  % connect
  mm neuron Connect

  % changing offset should fail
  mm << /offset 5. >> SetStatus
}
fail_or_die


% Test 4
% ensure offset behaves correctly with respect to origin / start / stop; set start and stop
% different from their initial values, simulate, check recordings. Then modify origin,
% simulate again, and check for consistency.
{
  (Test 4) ==

  /recint  3. def
  /recoffs 5. def
  /start   3. def
  /stop    15. def
  /origin  20. def
  /simtime 20. def

  /recs    [/V_m] def
  /times_1 [5. 8. 11. 14.] def
  /times_2 [5. 8. 11. 14. 26. 29. 32. 35.] def

  ResetKernel
  << /resolution res >> SetKernelStatus

  % create multimeter and node
  /mm /multimeter
    << /interval recint /offset recoffs /start start /stop stop /record_from recs >>
    Create def
  /neuron /iaf_psc_exp Create def

  % connect and simulate
  mm neuron Connect
  simtime Simulate

  % check results
  /result mm /events get /times get cva

  % compare to first reference data
  times_1 eq

  % change origin; this shouldn't affect the offset but only shift start-stop window
  mm << /origin origin >> SetStatus
  simtime Simulate

  % check results
  /result mm /events get /times get cva

  % compare to extended reference
  times_2 eq
}
assert_or_die

% Test 5
% Ensure offsets behave correctly when we create a second multimeter after an initial similation.
% Create two multimeters; one before initial simtime, one after. The offset and start time indicates
% that all samples should be taken from the second simulation, and the recordings from the two
% multimeters should be equal.
{
  (Test 5) ==

  /initsimtime 10. def
  /simtime     20. def
  /recoffs      1. def
  /recint       3. def
  /recstart    10. def
  /recstop     30. def

  /resolution 0.1 def

  ResetKernel

  << /resolution resolution >> SetKernelStatus

  % Create neuron
  /neuron /iaf_psc_exp Create def

  % Create multimeter
  /mm1 /multimeter Create def
  mm1 << /record_from [/V_m]
         /interval recint
         /offset recoffs
         /start recstart
         /stop recstop
      >> SetStatus

  mm1 neuron << /rule /all_to_all >> << /delay 0.1 >> Connect

  % Init simtime, nothing should be recorded
  initsimtime Simulate

  % Create second multimeter
  /mm2 /multimeter Create def
  mm2 << /record_from [/V_m]
         /interval recint
         /offset recoffs
         /start recstart
         /stop recstop
      >> SetStatus

  mm2 neuron << /rule /all_to_all >> << /delay 0.1 >> Connect

  % Simulate, all recordings should be from here
  simtime Simulate

  /times1 mm1 /events get /times get def
  /times2 mm2 /events get /times get def

  times1 times2 eq
}
assert_or_die

% Test 6
% Ensure that offset behave correctly after initial simulation time. The sample should
% occur at 'offset' when initial simulation time is less than offset and we have not recorded
% any parameters yet.
{
  (Test 6) ==

  /initsimtime 110.  def
  /simtime     250.  def
  /interval     60.  def
  /offset      170.3 def

  /resolution 0.1 def

  /reference_solution [offset initsimtime simtime add interval] Range def

  ResetKernel

  << /resolution resolution >> SetKernelStatus

  % Create neuron
  /neuron /iaf_psc_exp Create def

  initsimtime Simulate

  % Create multimeter
  /mm /multimeter Create def
  mm << /record_from [/V_m]
        /interval interval
        /offset offset
      >> SetStatus

  mm neuron << /rule /all_to_all >> << /delay 0.1 >> Connect

  simtime Simulate

  /time mm /events get /times get def
  time cva reference_solution eq
}
assert_or_die

% Test 7
% Ensure that multimeter with offset behave correctly after initial simulation time longer than offset.
% First recorded event should be between init simtime and interval.
{
  (Test 7) ==

  /initsimtime 250.  def  % initial simulation time longer than offset
  /simtime     250.  def
  /interval     60.  def
  /offset      170.3 def

  /resolution 0.1 def

  /reference_solution [offset interval add interval add initsimtime simtime add interval] Range def

  ResetKernel

  << /resolution resolution >> SetKernelStatus

  % Create neuron
  /neuron /iaf_psc_exp Create def

  initsimtime Simulate

  % Create multimeter
  /mm /multimeter Create def
  mm << /record_from [/V_m]
        /interval interval
        /offset offset
      >> SetStatus

  mm neuron << /rule /all_to_all >> << /delay 0.1 >> Connect

  simtime Simulate

  /time mm /events get /times get def
  time cva reference_solution eq
}
assert_or_die

endusing
